{"title": "Grouped Workers on AWS", "documentation": "", "code_examples": ["fromdiagramsimportDiagramfromdiagrams.aws.computeimportEC2fromdiagrams.aws.databaseimportRDSfromdiagrams.aws.networkimportELBwithDiagram(\"Grouped Workers\", show=False, direction=\"TB\"):\n    ELB(\"lb\") >> [EC2(\"worker1\"),\n                  EC2(\"worker2\"),\n                  EC2(\"worker3\"),\n                  EC2(\"worker4\"),\n                  EC2(\"worker5\")] >> RDS(\"events\")"]}
{"title": "Clustered Web Services", "documentation": "", "code_examples": ["fromdiagramsimportCluster, Diagramfromdiagrams.aws.computeimportECSfromdiagrams.aws.databaseimportElastiCache, RDSfromdiagrams.aws.networkimportELBfromdiagrams.aws.networkimportRoute53withDiagram(\"Clustered Web Services\", show=False):\n    dns = Route53(\"dns\")\n    lb = ELB(\"lb\")withCluster(\"Services\"):\n        svc_group = [ECS(\"web1\"),\n                     ECS(\"web2\"),\n                     ECS(\"web3\")]withCluster(\"DB Cluster\"):\n        db_primary = RDS(\"userdb\")\n        db_primary - [RDS(\"userdb ro\")]\n\n    memcached = ElastiCache(\"memcached\")\n\n    dns >> lb >> svc_group\n    svc_group >> db_primary\n    svc_group >> memcached"]}
{"title": "Event Processing on AWS", "documentation": "", "code_examples": ["fromdiagramsimportCluster, Diagramfromdiagrams.aws.computeimportECS, EKS, Lambdafromdiagrams.aws.databaseimportRedshiftfromdiagrams.aws.integrationimportSQSfromdiagrams.aws.storageimportS3withDiagram(\"Event Processing\", show=False):\n    source = EKS(\"k8s source\")withCluster(\"Event Flows\"):withCluster(\"Event Workers\"):\n            workers = [ECS(\"worker1\"),\n                       ECS(\"worker2\"),\n                       ECS(\"worker3\")]\n\n        queue = SQS(\"event queue\")withCluster(\"Processing\"):\n            handlers = [Lambda(\"proc1\"),\n                        Lambda(\"proc2\"),\n                        Lambda(\"proc3\")]\n\n    store = S3(\"events store\")\n    dw = Redshift(\"analytics\")\n\n    source >> workers >> queue >> handlers\n    handlers >> store\n    handlers >> dw"]}
{"title": "RabbitMQ Consumers with Custom Nodes", "documentation": "", "code_examples": ["fromurllib.requestimporturlretrievefromdiagramsimportCluster, Diagramfromdiagrams.aws.databaseimportAurorafromdiagrams.customimportCustomfromdiagrams.k8s.computeimportPod# Download an image to be used into a Custom Node classrabbitmq_url =\"https://jpadilla.github.io/rabbitmqapp/assets/img/icon.png\"rabbitmq_icon =\"rabbitmq.png\"urlretrieve(rabbitmq_url, rabbitmq_icon)withDiagram(\"Broker Consumers\", show=False):withCluster(\"Consumers\"):\n        consumers = [\n            Pod(\"worker\"),\n            Pod(\"worker\"),\n            Pod(\"worker\")]\n\n    queue = Custom(\"Message queue\", rabbitmq_icon)\n\n    queue >> consumers >> Aurora(\"Database\")"]}
